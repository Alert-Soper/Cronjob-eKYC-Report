name: Daily PromQL Report via Grafana

on:
  schedule:
    - cron: '30 1 * * *'  # ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 01:30 UTC (08:30 ‡∏ô. ‡πÑ‡∏ó‡∏¢) - ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GRAFANA_URL: 'http://122.8.149.46:8088/' # <<< ‡πÉ‡∏™‡πà URL Grafana ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  DATASOURCE_UID: 'beao6gxdgw740f'  # <<< ‡πÉ‡∏™‡πà UID ‡∏Ç‡∏≠‡∏á Prometheus Data Source
 # LINE_GROUP_ID: 'Cd28550496fd213d14a4b8aa42f5215b6' # <<< ‡πÉ‡∏™‡πà LINE Group ID user alert-blockfint group 12 ‡∏Ñ‡∏ô
  LINE_GROUP_ID: 'C4f96a3dfa5a6c0f8617b8fc931a79628' # <<< ‡πÉ‡∏™‡πà LINE Group ID user alert-soper group 6 ‡∏Ñ‡∏ô
  GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
  EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
  JOB_NAME: "thinker-gw" # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î job_name ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

jobs:
  generate-and-send-report:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dotenv pytz # ‡πÄ‡∏û‡∏¥‡πà‡∏° pytz ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö timezone

    - name: Query and send report
      env:
        GRAFANA_TOKEN: ${{ secrets.GRAFANA_TOKEN }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      run: |
        python - << 'EOF'
        import os
        import requests
        import json
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from datetime import datetime, timedelta, timezone
        import pytz # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö timezone

        # --- Configuration ---
        grafana_url = os.environ["GRAFANA_URL"]
        datasource_uid = os.environ["DATASOURCE_UID"]
        grafana_token = os.environ.get("GRAFANA_TOKEN")
        job_name = os.environ.get("JOB_NAME", "thinker-gw") # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å env ‡∏´‡∏£‡∏∑‡∏≠ default

        headers = {
            "Authorization": f"Bearer {grafana_token}",
            "Content-Type": "application/json"
        }

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timezone ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ query
        # ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ô‡∏µ‡πâ" ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
        thai_tz = pytz.timezone('Asia/Bangkok')
        now_utc = datetime.now(timezone.utc)
        
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô" ‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô (00:00:00 ‡∏ñ‡∏∂‡∏á 23:59:59)
        # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞ query ‡∏ì ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
        # ‡πÅ‡∏•‡∏∞ PromQL query ‡∏à‡∏∞‡πÉ‡∏ä‡πâ range selector [1d] ‡∏´‡∏£‡∏∑‡∏≠ [24h] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
        report_target_date_utc = now_utc.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(microseconds=1) # ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ UTC
        # ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ ‡∏ì ‡∏™‡∏¥‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC
        # today_thai = now_utc.astimezone(thai_tz).date()
        # start_of_today_thai = thai_tz.localize(datetime.combine(today_thai, datetime.min.time()))
        # report_time_utc = start_of_today_thai # Query ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤ 00:00 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÑ‡∏ó‡∏¢ (‡∏ã‡∏∂‡πà‡∏á PromQL ‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 1 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ)

        # PromQL queries (‡πÉ‡∏ä‡πâ range vector selector ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß query)
        queries = {
            "success_rate": f'''
            100 * (
                sum(rate(http_requests_total{{job="{job_name}", status=~"2.."}}[1d]))
                /
                sum(rate(http_requests_total{{job="{job_name}"}}[1d]))
            )
            ''',
            "api_errors": f'''
            sum(increase(http_requests_total{{job="{job_name}", status=~"5.."}}[1d]))
            ''',
            "daily_attempts": f'''
            sum(increase(http_requests_total{{job="{job_name}"}}[1d]))
            ''',
            "weekly_attempts": f'''
            sum(increase(http_requests_total{{job="{job_name}"}}[7d]))
            '''
        }

        def query_prometheus_via_grafana(query_promql, evaluation_time_unix=None):
            # ‡πÉ‡∏ä‡πâ instant query endpoint ‡∏Ç‡∏≠‡∏á Prometheus ‡∏ú‡πà‡∏≤‡∏ô Grafana proxy
            # PromQL query ‡πÄ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ range selector (‡πÄ‡∏ä‡πà‡∏ô [1d], [5m])
            api_endpoint = f"{grafana_url}/api/datasources/proxy/{datasource_uid}/api/v1/query"
            params = {"query": query_promql}
            if evaluation_time_unix:
                params["time"] = evaluation_time_unix

            print(f"Querying Grafana proxy: {api_endpoint} with params: {params.get('time')}") # Log ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ query
            try:
                response = requests.get(api_endpoint, headers=headers, params=params, timeout=30)
                response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
                return response.json()
            except requests.exceptions.RequestException as e:
                print(f"Error querying Grafana API: {e}")
                print(f"Response status: {response.status_code if 'response' in locals() else 'N/A'}")
                print(f"Response text: {response.text if 'response' in locals() else 'N/A'}")
                return {"status": "error", "error": str(e), "errorType": "request_exception"}


        def process_results(raw_results_dict):
            metrics = {}
            for name, data in raw_results_dict.items():
                print(f"Processing '{name}': {json.dumps(data)[:200]}...") # Log ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á raw data
                if data and data.get("status") == "success":
                    result = data.get("data", {}).get("result", [])
                    if result:
                        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö instant query, result ‡πÄ‡∏õ‡πá‡∏ô list ‡∏ó‡∏µ‡πà‡∏°‡∏µ 1 element (‡∏ñ‡πâ‡∏≤ query ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
                        # element ‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ "value": [timestamp, "numeric_value_as_string"]
                        try:
                            value_str = result[0].get("value", [None, None])[1]
                            if value_str is not None:
                                metrics[name] = float(value_str)
                            else:
                                print(f"Warning: No value found in result for '{name}'")
                                metrics[name] = 0 # ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                        except (IndexError, TypeError, ValueError) as e:
                            print(f"Error parsing value for '{name}': {e}. Data: {result}")
                            metrics[name] = 0 # ‡∏´‡∏£‡∏∑‡∏≠ None
                    else:
                        print(f"Warning: Empty result array for '{name}'. Data: {data.get('data')}")
                        metrics[name] = 0 # ‡∏´‡∏£‡∏∑‡∏≠ None
                else:
                    print(f"Query for '{name}' failed or returned unexpected data: {data.get('errorType')} - {data.get('error')}")
                    # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ error message ‡∏à‡∏≤‡∏Å Grafana ‡πÄ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô "id is invalid") ‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà data.get('message')
                    if data.get('message'):
                        print(f"Grafana message for '{name}': {data.get('message')}")
                    metrics[name] = 0 # ‡∏´‡∏£‡∏∑‡∏≠ None
            return metrics

        # --- Main execution ---
        raw_results = {}
        # Query ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô UTC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ [1d] ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô
        evaluation_timestamp = report_target_date_utc.timestamp()

        print(f"Querying data for time: {report_target_date_utc.isoformat()} (Unix: {evaluation_timestamp})")

        for name, query in queries.items():
            raw_results[name] = query_prometheus_via_grafana(query, evaluation_time_unix=evaluation_timestamp)

        print("\nRaw results from Grafana API:")
        print(json.dumps(raw_results, indent=2)) # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug

        metrics = process_results(raw_results)
        print("\nProcessed metrics:")
        print(json.dumps(metrics, indent=2))


        if any(metrics.values()): # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ metric ‡πÉ‡∏î‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 0 ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            report_date_display = report_target_date_utc.astimezone(thai_tz).strftime('%Y-%m-%d') # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
            report_lines = [
                f"üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö {job_name} ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (via PromQL)",
                f"‚è∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {report_date_display} (‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)",
                "",
                f"‚úÖ Success Rate: {metrics.get('success_rate', 0):.2f}%",
                f"‚ùå Error Rate: {100 - metrics.get('success_rate', 0):.2f}%", # ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ñ‡πâ‡∏≤ success_rate ‡πÄ‡∏õ‡πá‡∏ô None
                "",
                f"üî• API Errors (5xx): {metrics.get('api_errors', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                "",
                f"üìà Attempts ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ({report_date_display}): {metrics.get('daily_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                f"üìÖ Attempts 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤: {metrics.get('weekly_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            ]
            report_text = "\n".join(report_lines)
            print("\nGenerated Report Text:")
            print(report_text)

            # 1. ‡∏™‡πà‡∏á LINE
            line_group_id = os.environ.get("LINE_GROUP_ID")
            line_token = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")
            if line_group_id and line_token:
                try:
                    message = {
                        "to": line_group_id,
                        "messages": [{"type": "text", "text": report_text}]
                    }
                    response = requests.post(
                        'https://api.line.me/v2/bot/message/push',
                        headers={'Authorization': f'Bearer {line_token}', 'Content-Type': 'application/json'},
                        json=message,
                        timeout=10
                    )
                    print(f"LINE API Response Status Code: {response.status_code}")
                    if response.status_code != 200: print(f"LINE API Response Body: {response.text}")
                except Exception as e:
                    print(f"Error sending LINE message: {str(e)}")
            else:
                print("LINE_GROUP_ID or LINE_CHANNEL_ACCESS_TOKEN not set. Skipping LINE notification.")

            # 2. ‡∏™‡πà‡∏á Google Chat
            google_chat_webhook = os.environ.get("GOOGLE_CHAT_WEBHOOK_URL")
            if google_chat_webhook:
                try:
                    # Google Chat ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Markdown ‡πÉ‡∏ô "text" ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á, ‡πÅ‡∏ï‡πà card ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
                    google_chat_message = {
                        "cardsV2": [{
                            "cardId": "dailyReportCard",
                            "card": {
                                "header": {
                                    "title": f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö {job_name} ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô",
                                    "subtitle": f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {report_date_display} (‡πÑ‡∏ó‡∏¢)",
                                    "imageUrl": "https://img.icons8.com/plasticine/100/000000/activity-history.png", # Optional icon
                                    "imageType": "CIRCLE"
                                },
                                "sections": [{
                                    "widgets": [
                                        {"textParagraph": {"text": f"<b>Success Rate:</b> {metrics.get('success_rate', 0):.2f}%"}},
                                        {"textParagraph": {"text": f"<b>Error Rate:</b> {100 - metrics.get('success_rate', 0):.2f}%"}},
                                        {"textParagraph": {"text": f"<b>API Errors (5xx):</b> {metrics.get('api_errors', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"}},
                                        {"textParagraph": {"text": f"<b>Daily Attempts ({report_date_display}):</b> {metrics.get('daily_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"}},
                                        {"textParagraph": {"text": f"<b>Weekly Attempts (7d):</b> {metrics.get('weekly_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"}}
                                    ]
                                }]
                            }
                        }]
                    }
                    response = requests.post(google_chat_webhook, json=google_chat_message, timeout=10)
                    print(f"Google Chat Response Status Code: {response.status_code}")
                    if response.status_code != 200: print(f"Google Chat Response Body: {response.text}")
                except Exception as e:
                    print(f"Error sending Google Chat message: {str(e)}")
            else:
                print("GOOGLE_CHAT_WEBHOOK_URL not set. Skipping Google Chat notification.")

            # 3. ‡∏™‡πà‡∏á Email
            smtp_user = os.environ.get("SMTP_USERNAME")
            smtp_pass = os.environ.get("SMTP_PASSWORD")
            email_recipients = os.environ.get("EMAIL_RECIPIENTS")
            if smtp_user and smtp_pass and email_recipients:
                try:
                    msg = MIMEMultipart()
                    msg['From'] = smtp_user
                    msg['To'] = email_recipients
                    msg['Subject'] = f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö {job_name} ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô {report_date_display}"

                    html = f"""\
                    <html>
                      <body>
                        <h2>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö {job_name} ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô</h2>
                        <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {report_date_display} (‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)</p>
                        <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse;">
                          <tr style="background-color: #f2f2f2;"><th>‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å</th><th>‡∏Ñ‡πà‡∏≤</th></tr>
                          <tr><td>Success Rate</td><td>{metrics.get('success_rate', 0):.2f}%</td></tr>
                          <tr><td>Error Rate</td><td>{100 - metrics.get('success_rate', 0):.2f}%</td></tr>
                          <tr><td>API Errors (5xx)</td><td>{metrics.get('api_errors', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</td></tr>
                          <tr><td>Daily Attempts ({report_date_display})</td><td>{metrics.get('daily_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</td></tr>
                          <tr><td>Weekly Attempts (7 ‡∏ß‡∏±‡∏ô)</td><td>{metrics.get('weekly_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</td></tr>
                        </table>
                      </body>
                    </html>
                    """
                    msg.attach(MIMEText(html, 'html'))

                    with smtplib.SMTP('smtp.gmail.com', 587) as server: # ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ ENV var ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SMTP host/port
                        server.starttls()
                        server.login(smtp_user, smtp_pass)
                        server.send_message(msg)
                    print("‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                except Exception as e:
                    print(f"‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")
            else:
                print("SMTP or EMAIL_RECIPIENTS not set. Skipping Email notification.")

            print("\n‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        else:
            error_message_header = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            error_message_details = "Raw API results:\n" + json.dumps(raw_results, indent=2)
            full_error_message = f"‚ö†Ô∏è {error_message_header}\n\n{error_message_details}"
            print(full_error_message)

            # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Chat)
            google_chat_webhook = os.environ.get("GOOGLE_CHAT_WEBHOOK_URL")
            if google_chat_webhook:
                try:
                    # ‡∏™‡πà‡∏á text ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ß‡πÑ‡∏õ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÇ‡∏î‡∏ô‡∏ï‡∏±‡∏î
                    # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á error_message_details ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                    max_len = 3800 # Google Chat text limit is around 4000 chars
                    if len(full_error_message) > max_len:
                        trimmed_details = error_message_details[:max_len - len(error_message_header) - 100] + "\n... (truncated)"
                        full_error_message = f"‚ö†Ô∏è {error_message_header}\n\n{trimmed_details}"

                    requests.post(
                        google_chat_webhook,
                        json={"text": full_error_message},
                        timeout=10
                    )
                    print("Error notification sent to Google Chat.")
                except Exception as e:
                    print(f"Error sending error notification to Google Chat: {str(e)}")
        EOF
