name: Daily Grafana Report

on:
  schedule:
    - cron: '0 9 * * *'
  push:
    branches:
    - main
  workflow_dispatch:

env:
  GRAFANA_URL: 'http://122.8.149.46:8088/'
  DASHBOARD_UID: 'feao75j1yb474f'
  PANEL_IDS: '2,28,41,42,1'
  LINE_GROUP_ID: 'Cd28550496fd213d14a4b8aa42f5215b6'

jobs:
  generate-and-send-report:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pillow python-dotenv file

    - name: Download Grafana graphs
      env:
        GRAFANA_TOKEN: ${{ secrets.GRAFANA_TOKEN }}
      run: |
        IFS=',' read -ra PANELS <<< "$PANEL_IDS"
        for panel_id in "${PANELS[@]}"; do
          echo "Downloading panel $panel_id"
          
          # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢ curl ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö output ‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
          curl_response=$(curl -v -H "Authorization: Bearer $GRAFANA_TOKEN" \
            "$GRAFANA_URL/render/d-solo/$DASHBOARD_UID?panelId=$panel_id&width=800&height=600&from=now-1d&to=now" \
            -o "grafana_panel_$panel_id.png" 2>&1)
          
          echo "Curl response:"
          echo "$curl_response"
          
          # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
          if file "grafana_panel_$panel_id.png" | grep -q 'PNG image'; then
            echo "File is valid PNG, converting to JPG"
            python -c "from PIL import Image; img = Image.open('grafana_panel_$panel_id.png'); img.save('grafana_panel_$panel_id.jpg', quality=85, optimize=True)"
            rm "grafana_panel_$panel_id.png"
          else
            echo "ERROR: Downloaded file is not a valid PNG image"
            echo "File content:"
            head -c 200 "grafana_panel_$panel_id.png"  # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
            exit 1
          fi
        done

    - name: Send to Line Group
      if: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
      env:
        CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
      run: |
        python - <<EOF
        # ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå Python ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        import os
        import requests
        import json
        from PIL import Image

        def optimize_image(image_path):
            output_path = f"optimized_{os.path.basename(image_path)}"
            with Image.open(image_path) as img:
                img.save(output_path, format='JPEG', quality=85)
            return output_path

        headers = {
            'Authorization': f'Bearer {os.environ["CHANNEL_ACCESS_TOKEN"]}',
            'Content-Type': 'application/json'
        }

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        requests.post('https://api.line.me/v2/bot/message/push',
            headers=headers,
            json={
                "to": os.environ["LINE_GROUP_ID"],
                "messages": [{"type": "text", "text": "üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô üìä"}]
            })

        # ‡∏™‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü
        for panel_id in os.environ["PANEL_IDS"].split(','):
            image_file = f"grafana_panel_{panel_id}.png"
            optimized_file = optimize_image(image_file)
            
            with open(optimized_file, 'rb') as f:
                upload_res = requests.post(
                    'https://api-data.line.me/v2/bot/message/upload',
                    headers={'Authorization': f'Bearer {os.environ["CHANNEL_ACCESS_TOKEN"]}'},
                    files={'file': f}
                )
                image_url = upload_res.json()['url']

            requests.post('https://api.line.me/v2/bot/message/push',
                headers=headers,
                json={
                    "to": os.environ["LINE_GROUP_ID"],
                    "messages": [{
                        "type": "image",
                        "originalContentUrl": image_url,
                        "previewImageUrl": image_url
                    }]
                })
        EOF

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: grafana-daily-report
        path: |
          grafana_panel_*.jpg
          grafana_panel_*.png
