name: Daily PromQL Report via Grafana

on:
  schedule:
    - cron: '30 1 * * *'  # ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00 UTC (16:00 ‡∏ô. ‡πÑ‡∏ó‡∏¢)
  push:
    branches:
    - main
  workflow_dispatch:

env:
  GRAFANA_URL: 'http://122.8.149.46:8088/'
  DATASOURCE_UID: 'beao6gxdgw740f'  # UID ‡∏Ç‡∏≠‡∏á Prometheus Data Source ‡πÉ‡∏ô Grafana
  LINE_GROUP_ID: 'Cd28550496fd213d14a4b8aa42f5215b6'

jobs:
  generate-and-send-report:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dotenv

    - name: Query and send report
      env:
        GRAFANA_TOKEN: ${{ secrets.GRAFANA_TOKEN }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
      run: |
        python - <<EOF
        import os
        import requests
        import json
        from datetime import datetime, timedelta

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Grafana API
        grafana_url = os.environ["GRAFANA_URL"]
        headers = {
            "Authorization": f"Bearer {os.environ['GRAFANA_TOKEN']}",
            "Content-Type": "application/json"
        }
        job_name = "thinker-gw"
        time_range = "1d"
        time_r = "7d"
        # 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î PromQL Queries (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Query ‡πÉ‡∏ô Prometheus ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
        queries = {
            "success_rate": f"""
                  100 * (
            sum(rate(http_requests_total{{job="{job_name}", status=~"2.."}}[{time_range}]))
            /
            sum(rate(http_requests_total{{job="{job_name}"}}[{time_range}]))
            )
            """,
            "api_errors": sum(rate(http_request_total{job="{job_name}",status_code=~"5.."}[{time_range}])),
            "daily_attempts": sum(increase(http_request_total{job="{job_name}"}[{time_range}])),
            "weekly_attempts": sum(increase(http_request_total{job="{job_name}"}[{time_r}]))
        }

        # 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Grafana Data Source Proxy
        def query_prometheus_via_grafana(query):
            now = datetime.now()
            yesterday = now - timedelta(days=1)
            
            params = {
                "query": query,
                "start": yesterday.timestamp(),
                "end": now.timestamp(),
                "step": "1h"  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            }
            
            response = requests.get(
                f"{grafana_url}/api/datasources/proxy/{os.environ['DATASOURCE_UID']}/api/v1/query_range",
                headers=headers,
                params=params
            )
            return response.json()

        # 3. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        def process_results(results):
            metrics = {}
            
            # Success Rate
            if 'success_rate' in results:
                values = [float(x[1]) for x in results['success_rate']['data']['result'][0]['values']]
                metrics['success_rate'] = sum(values) / len(values)
            
            # API Errors
            if 'api_errors' in results:
                metrics['api_errors'] = sum(
                    float(x[1]) for x in results['api_errors']['data']['result'][0]['values']
                )
            
            # Attempts
            if 'daily_attempts' in results:
                metrics['daily_attempts'] = sum(
                    float(x[1]) for x in results['daily_attempts']['data']['result'][0]['values']
                )
            
            if 'weekly_attempts' in results:
                metrics['weekly_attempts'] = sum(
                    float(x[1]) for x in results['weekly_attempts']['data']['result'][0]['values']
                )
            
            return metrics

        # 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        results = {}
        for name, query in queries.items():
            results[name] = query_prometheus_via_grafana(query)

        metrics = process_results(results)

        # 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        if metrics:
            report = [
                "üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (via PromQL)",
                f"‚è∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now().strftime('%Y-%m-%d')}",
                "",
                f"‚úÖ Success Rate: {metrics.get('success_rate', 0):.2f}%",
                f"‚ùå Error Rate: {100 - metrics.get('success_rate', 0):.2f}%",
                "",
                f"üî• API Errors: {metrics.get('api_errors', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                "",
                f"üìà Attempts ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {metrics.get('daily_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                f"üìÖ Attempts 7 ‡∏ß‡∏±‡∏ô: {metrics.get('weekly_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            ]
            
            # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Line
            message = {
                "to": os.environ["LINE_GROUP_ID"],
                "messages": [{
                    "type": "text",
                    "text": "\n".join(report)
                }]
            }
            
            response = requests.post(
                'https://api.line.me/v2/bot/message/push',
                headers={'Authorization': f'Bearer {os.environ["LINE_CHANNEL_ACCESS_TOKEN"]}'},
                json=message
            )
            print("‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        else:
            print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
        EOF
