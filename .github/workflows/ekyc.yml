name: Daily PromQL Report via Grafana

on:
  schedule:
    - cron: '30 1 * * *'  # ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00 UTC (16:00 ‡∏ô. ‡πÑ‡∏ó‡∏¢)
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GRAFANA_URL: 'http://122.8.149.46:8088/'
  DATASOURCE_UID: 'beao6gxdgw740f'  # UID ‡∏Ç‡∏≠‡∏á Prometheus Data Source ‡πÉ‡∏ô Grafana
  LINE_GROUP_ID: 'Cd28550496fd213d14a4b8aa42f5215b6'
  GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
  EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}

jobs:
  generate-and-send-report:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dotenv

    - name: Query and send report
      env:
        GRAFANA_TOKEN: ${{ secrets.GRAFANA_TOKEN }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      run: |
        python - << 'EOF'
        import os
        import requests
        import json
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from datetime import datetime, timedelta

        # ‡∏™‡πà‡∏ß‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Grafana ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
        grafana_url = os.environ["GRAFANA_URL"]
        headers = {
            "Authorization": f"Bearer {os.environ['GRAFANA_TOKEN']}",
            "Content-Type": "application/json"
        }

        job_name = "thinker-gw"
        time_range = "1d"
        time_r = "7d"

        queries = {
            "success_rate": f'''
            100 * (
                sum(rate(http_requests_total{{job="{job_name}", status=~"2.."}}[{time_range}]))
                /
                sum(rate(http_requests_total{{job="{job_name}"}}[{time_range}]))
            )
            ''',
            "api_errors": f'''
            sum(rate(http_requests_total{{job="{job_name}", status=~"5.."}}[{time_range}]))
            ''',
            "daily_attempts": f'''
            sum(increase(http_requests_total{{job="{job_name}"}}[{time_range}]))
            ''',
            "weekly_attempts": f'''
            sum(increase(http_requests_total{{job="{job_name}"}}[{time_r}]))
            '''
        }

        def query_prometheus_via_grafana(query):
            now = datetime.now()
            yesterday = now - timedelta(days=1)
            params = {
                "query": query,
                "start": yesterday.timestamp(),
                "end": now.timestamp(),
                "step": "1h"
            }
            response = requests.get(
                f"{grafana_url}/api/datasources/proxy/{os.environ['DATASOURCE_UID']}/api/v1/query_range",
                headers=headers,
                params=params
            )
            return response.json()

        def process_results(results):
            metrics = {}
            # ... ‡∏™‡πà‡∏ß‡∏ô process_results ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ...
            return metrics

        results = {}
        for name, query in queries.items():
            results[name] = query_prometheus_via_grafana(query)

        print("Raw results for debugging:")
        print(json.dumps(results, indent=2))

        metrics = process_results(results)

        if metrics:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            report_date = datetime.now().strftime('%Y-%m-%d')
            report_lines = [
                "üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (via PromQL)",
                f"‚è∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {report_date}",
                "",
                f"‚úÖ Success Rate: {metrics.get('success_rate', 0):.2f}%",
                f"‚ùå Error Rate: {100 - metrics.get('success_rate', 0):.2f}%",
                "",
                f"üî• API Errors: {metrics.get('api_errors', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                "",
                f"üìà Attempts ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {metrics.get('daily_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                f"üìÖ Attempts 7 ‡∏ß‡∏±‡∏ô: {metrics.get('weekly_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            ]
            report_text = "\n".join(report_lines)

            # 1. ‡∏™‡πà‡∏á LINE (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            try:
                message = {
                    "to": os.environ["LINE_GROUP_ID"],
                    "messages": [{
                        "type": "text",
                        "text": report_text
                    }]
                }
                response = requests.post(
                    'https://api.line.me/v2/bot/message/push',
                    headers={'Authorization': f'Bearer {os.environ["LINE_CHANNEL_ACCESS_TOKEN"]}'},
                    json=message
                )
                print(f"LINE API Response Status Code: {response.status_code}")
                print(f"LINE API Response Body: {response.text}")
                print("Debug - LINE_GROUP_ID:", os.environ.get("LINE_GROUP_ID"))
            except Exception as e:
                print(f"Error sending LINE message: {str(e)}")

            # 2. ‡∏™‡πà‡∏á Google Chat
            try:
                google_chat_message = {
                    "text": report_text,
                    "cards": [{
                        "header": {
                            "title": "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô",
                            "subtitle": f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {report_date}",
                        },
                        "sections": [{
                            "widgets": [
                                {"keyValue": {"topLabel": "Success Rate", "content": f"{metrics.get('success_rate', 0):.2f}%"}},
                                {"keyValue": {"topLabel": "Error Rate", "content": f"{100 - metrics.get('success_rate', 0):.2f}%"}},
                                {"keyValue": {"topLabel": "API Errors", "content": f"{metrics.get('api_errors', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"}},
                                {"keyValue": {"topLabel": "Daily Attempts", "content": f"{metrics.get('daily_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"}},
                                {"keyValue": {"topLabel": "Weekly Attempts", "content": f"{metrics.get('weekly_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"}}
                            ]
                        }]
                    }]
                }
                response = requests.post(
                    os.environ["GOOGLE_CHAT_WEBHOOK_URL"],
                    json=google_chat_message
                )
                print(f"Google Chat Response Status Code: {response.status_code}")
                print("Debug - GRAFANA_TOKEN:", os.environ.get("GRAFANA_TOKEN"))
            except Exception as e:
                print(f"Error sending Google Chat message: {str(e)}")

            # 3. ‡∏™‡πà‡∏á Email
            try:
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                msg = MIMEMultipart()
                msg['From'] = os.environ["SMTP_USERNAME"]
                msg['To'] = os.environ["EMAIL_RECIPIENTS"]
                msg['Subject'] = f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô {report_date}"

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏• HTML
                html = f"""\
                <html>
                  <body>
                    <h2>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô</h2>
                    <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {report_date}</p>
                    <table border="1">
                      <tr><th>‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å</th><th>‡∏Ñ‡πà‡∏≤</th></tr>
                      <tr><td>Success Rate</td><td>{metrics.get('success_rate', 0):.2f}%</td></tr>
                      <tr><td>Error Rate</td><td>{100 - metrics.get('success_rate', 0):.2f}%</td></tr>
                      <tr><td>API Errors</td><td>{metrics.get('api_errors', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</td></tr>
                      <tr><td>Daily Attempts</td><td>{metrics.get('daily_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</td></tr>
                      <tr><td>Weekly Attempts</td><td>{metrics.get('weekly_attempts', 0):,.0f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</td></tr>
                    </table>
                  </body>
                </html>
                """

                # ‡πÅ‡∏ô‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                msg.attach(MIMEText(html, 'html'))

                # ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                with smtplib.SMTP('smtp.gmail.com', 587) as server:
                    server.starttls()
                    server.login(os.environ["SMTP_USERNAME"], os.environ["SMTP_PASSWORD"])
                    server.send_message(msg)
                
                print("‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                print("Debug - EMAIL_RECIPIENTS:", os.environ.get("EMAIL_RECIPIENTS"))
            except Exception as e:
                print(f"‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")

            print("‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        else:
            error_message = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô\n\nRaw results:\n" + json.dumps(results, indent=2)
            print(error_message)
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            try:
                requests.post(
                    os.environ["GOOGLE_CHAT_WEBHOOK_URL"],
                    json={"text": f"‚ö†Ô∏è {error_message}"}
                )
            except Exception as e:
                print(f"Error sending error notification: {str(e)}")
        EOF
